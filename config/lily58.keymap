/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
// ------------------------------------------------------------------------------------------------------------
// |  ESC  |  1  |  2  |  3   |  4    |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
// |  TAB  |  Q  |  W  |  E   |  R    |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
// |   =   |  A  |  S  |  D   |  F    |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
// |  SL_3 |  Z  |  X  |  C   |  V    |  B   |   DEL  |  | TOG_L |  N   |  M    |  ,    |  .   |   /   | ENTER |
//                     | ALT  | CTRL  | BSPC |  SHIFT |  | SPACE | RAISE| LOWER | GUI   |
            bindings = <
&kp ESC   &kp N1 &kp N2 &kp N3   &kp N4     &kp N5                         &kp N6 &kp N7   &kp N8    &kp N9  &kp N0   &kp GRAVE
&kp TAB   &kp Q  &kp W  &kp E    &kp R      &kp T                          &kp Y  &kp U    &kp I     &kp O   &kp P    &kp MINUS
&kp EQUAL &kp A  &kp S  &kp D    &kp F      &kp G                          &kp H  &kp J    &kp K     &kp L   &kp SEMI &kp SQT
&sl 3     &kp Z  &kp X  &kp C    &kp V      &kp B     &kp DEL    &tog 1    &kp N  &kp M    &kp COMMA &kp DOT &kp FSLH &kp RET
                        &kp LALT &kp LCTRL  &kp BSPC  &kp LSHFT  &kp SPACE &mo 2  &mo 1    &kp RGUI
            >;
        };

        lower_layer {
// ------------------------------------------------------------------------------------------------------------
// |  TO_D |      |     |  A^  |      |      |                    | CALC  |   =   |   (   |  )   |   /   | C_MUTE |
// | PG_UP |      | CS< |  ^   |  CS> |      |                    | CLEAR |   7   |   8   |  9   |   *   | VOL_UP |
// | PG_DN | HOME |  <- |  v   |  ->  | END  |                    |   .   |   4   |   5   |  6   |   -   | VOL_DN |
// | PSCRN |      |  C< |  Av  |  C>  |      |  INS   |  | TOG_L  |   0   |   1   |   2   |  3   |   +   | ENTER  |
//                      |      |      |      |        |  |        |       |       |       |
            bindings = <
&to 0      &none    &none            &kp LA(UP)    &none              &none                     &kp C_AL_CALC  &kp KP_EQUAL  &kp KP_LPAR  &kp KP_RPAR  &kp KP_DIVIDE    &kp C_MUTE
&kp PG_UP  &none    &kp LC(LS(LEFT)) &kp UP        &kp LC(LS(RIGHT))  &none                     &kp CLEAR2     &kp N7        &kp N8       &kp N9       &kp KP_MULTIPLY  &kp C_VOL_UP
&kp PG_DN  &kp HOME &kp LEFT         &kp DOWN      &kp RIGHT          &kp END                   &kp KP_DOT     &kp N4        &kp N5       &kp N6       &kp KP_MINUS     &kp C_VOL_DN
&kp PSCRN  &none    &kp LC(LEFT)     &kp LA(DOWN)  &kp LC(RIGHT)      &none    &kp INS  &tog 1  &kp N0         &kp N1        &kp N2       &kp N3       &kp KP_PLUS      &kp KP_ENTER
                                     &trans        &trans             &trans   &trans   &trans  &trans         &trans        &trans
            >;
        };

        raise_layer {
// ------------------------------------------------------------------------------------------------------------
// |       |     |     |      |      |      |                  |       |       |       |      |      |  TO_U  |
// |       | "|" |  *  |  -   |  +   |      |                  |       |  [    |   ]   |   `  |  ~   |        |
// |       |  !  |  @  |  #   |  $   |  %   |                  |   &   |  (    |   )   |   =  |  \   |        |
// |       |     |     |  "   |  '   |  ^   | K_APP |  | CAPS  |   _   |  {    |   }   |      |      |        |
//                     |      |      |      |       |  |       |       |       |       |
            bindings = < 
&none  &none     &none      &none      &none       &none                            &none      &none     &none     &none      &none      &to 3
&none  &kp PIPE  &kp ASTRK  &kp MINUS  &kp PLUS    &none                            &none      &kp LBKT  &kp RBKT  &kp GRAVE  &kp TILDE  &none
&none  &kp EXCL  &kp AT     &kp HASH   &kp DOLLAR  &kp PRCNT                        &kp AMPS   &kp LPAR  &kp RPAR  &kp EQUAL  &kp BSLH   &none   
&none  &none     &none      &kp DQT    &kp SQT     &kp CARET   &kp K_APP  &kp CAPS  &kp UNDER  &kp LBRC  &kp RBRC  &none      &none      &none
                            &trans     &trans      &trans      &trans     &trans    &trans     &trans    &trans
            >;
        };

        util_layer {
// ------------------------------------------------------------------------------------------------------------
// | TO_D  |  F1   |  F2   |  F3   |  F4   |  F5   |                  | BT1   | BT2   |  BT3   |  BT4   |  BT5 | BTCLR  |                
// |  F6   |  F7   |  F8   |  F9   |  F10  |  F11  |                  | CSESC |       |        |        |      | EP_ON  |                  
// |  F13  |  F14  |  F15  |  F16  |  F17  |  F18  |                  | ACDEL |       |        |        |      | EP_OFF |                  
// |  F19  |  F20  |  F21  |  F22  |  F23  |  F24  |  F12  |  |       | ALTF4 |       |        |        |      | EP_TOG |    
//                         |       |       |       |       |  |       |       |       |        |
            bindings = < 
&to 0    &kp F1   &kp F2   &kp F3   &kp F4   &kp F5                    &bt BT_SEL 0     &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_CLR                
&kp F6   &kp F7   &kp F8   &kp F9   &kp F10  &kp F11                   &kp LC(LS(ESC))  &none         &none         &none         &none         &ext_power EP_ON                   
&kp F13  &kp F14  &kp F15  &kp F16  &kp F17  &kp F18                   &kp LA(LC(DEL))  &none         &none         &none         &none         &ext_power EP_OFF                         
&kp F19  &kp F20  &kp F21  &kp F22  &kp F23  &kp F24  &kp F12  &none   &kp LA(F4)       &none         &none         &none         &none         &ext_power EP_TOG
                           &trans   &trans   &trans   &trans   &trans  &trans           &trans        &trans
            >;
        };
    };
};
